postgres=# \c demo

SELECT bookings.now();

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Задача. Кто летел позавчера рейсом Москва (SVO) — Новосибирск (OVB) на месте 1A и когда он забронировал себе билет?
«Позавчера» отсчитывается от booking.now

псведомнимы:
boarding_passes bp
bookings b
tickets t
flights f

Позавчера = 
f.scheduled_departure::date = bookings.now()::date - INTERVAL '2 day'

вылет из Москвы
f.departure_airport = 'SVO'

прилёт в Новосибирск
f.arrival_airport = 'OVB'

место
bp.seat_no = '1A'

Берём данные из таблиц (JOIN), где (ON) 
bookings b 
JOIN tickets t ON t.book_ref = b.book_ref 
JOIN boarding_passes bp ON bp.ticket_no = t.ticket_no 
JOIN flights f ON f.flight_id = bp.flight_id

ищем:
t.passenger_name, b.book_date

полный запрос:
SELECT t.passenger_name, b.book_date
FROM bookings b
JOIN tickets t
ON t.book_ref = b.book_ref
JOIN boarding_passes bp
ON bp.ticket_no = t.ticket_no
JOIN flights f
ON f.flight_id = bp.flight_id
WHERE f.departure_airport = 'SVO'
AND f.arrival_airport = 'OVB'
AND f.scheduled_departure::date =
bookings.now()::date - INTERVAL '2 day'
AND bp.seat_no = '1A';

////////////////////////////////////////////////////////////////
Задача. Сколько мест осталось незанятыми вчера на рейсе PG0404?

1) Используем конструкцию NOT EXISTS

Псевдомимы 
flights f
seats s
boarding_passes bp

Ищем:
 count(*)

В:
flights f 
JOIN seats s ON s.aircraft_code = f.aircraft_code 

С условием - номер рейса и время вылета
f.flight_no = 'PG0404'
AND f.scheduled_departure::date = bookings.now()::date - INTERVAL '1 day'

и отсутствие результатов подзапроса

NOT EXISTS (
	SELECT NULL
	FROM boarding_passes bp
	WHERE bp.flight_id = f.flight_id AND bp.seat_no = s.seat_no
);

Полный запрос

SELECT count(*)
FROM flights f JOIN seats s ON s.aircraft_code = f.aircraft_code
WHERE f.flight_no = 'PG0404'
AND f.scheduled_departure::date = bookings.now()::date - INTERVAL '1 day'
AND NOT EXISTS (
SELECT NULL
FROM boarding_passes bp
WHERE bp.flight_id = f.flight_id AND bp.seat_no = s.seat_no
);


Другом варианте используем вычитание множеств. 

Пвевдонимы 
seats s
boarding_passes bp

Ищем 
count(*)

Запрос возвращает множество мест в самолёте для рейса
SELECT s.seat_no FROM seats s
WHERE s.aircraft_code = (
	SELECT aircraft_code FROM flights
	WHERE flight_no = 'PG0404' AND scheduled_departure::date =bookings.now()::date - INTERVAL '1 day'
)

Запрос возвращает множество проданных мест в самолёте для рейса
SELECT bp.seat_no FROM boarding_passes bp
WHERE bp.flight_id = (
	SELECT flight_id FROM flights
	WHERE flight_no = 'PG0404' AND scheduled_departure::date =bookings.now()::date - INTERVAL '1 day'
)

t - результат вычитания множеств

Полный запрос

SELECT count(*)
FROM 
  (
	SELECT s.seat_no FROM seats s
	WHERE s.aircraft_code = (
		SELECT aircraft_code FROM flights
		WHERE flight_no = 'PG0404' AND scheduled_departure::date = bookings.now()::date - INTERVAL '1 day'
	)
EXCEPT
	SELECT bp.seat_no FROM boarding_passes bp
	WHERE bp.flight_id = (
		SELECT flight_id FROM flights 
		WHERE flight_no = 'PG0404' AND scheduled_departure::date = bookings.now()::date - INTERVAL '1 day'
	)
  ) t;
/////////////////////////////////////////////////////
Задача. 
На каких рейсах происходили самые длительные задержки? 
Выведите список из десяти рейсов, задержанных на самые длительные сроки.
Учитываем только состоявшиеся вылеты

SELECT f.flight_no, f.scheduled_departure, f.actual_departure, f.actual_departure - f.scheduled_departure AS delay
FROM flights f
WHERE f.actual_departure IS NOT NULL
ORDER BY f.actual_departure - f.scheduled_departure
DESC
LIMIT 10;

/////////////////////////////////////////////////////
Задача. Какова минимальная и максимальная продолжительность полета для каждого из возможных рейсов из
Москвы в Санкт-Петербург, и сколько раз вылет рейса был задержан больше, чем на час?
Учитываем только уже выполненные рейсы.
Воспользоваться готовым представлением flights_v 

SELECT f.flight_no, f.scheduled_duration, 
	min(f.actual_duration), max(f.actual_duration), 
	sum (	
		CASE 
		     WHEN f.actual_departure > f.scheduled_departure + INTERVAL '1 hour' 
		  THEN 1 
		  ELSE 0 
		END
	     ) delays
FROM flights_v f
WHERE f.departure_city = 'Москва'
	AND f.arrival_city = 'Санкт-Петербург'
	AND f.status = 'Arrived'
GROUP BY f.flight_no,
f.scheduled_duration;

////////////Агрегатные функции////////////////////////////////

Задача. Найдите  пассажиров, которые зарегистрировались на все рейсы первыми. 
Учтите только тех пассажиров, которые совершали минимум два рейса.
Номера посадочных талонов выдаются в порядке регистрации

SELECT t.passenger_name, t.ticket_no
FROM tickets t 
   JOIN boarding_passes bp ON bp.ticket_no = t.ticket_no
GROUP BY t.passenger_name, t.ticket_no
   HAVING max(bp.boarding_no) = 1 AND count(*) > 1;

HAVING используется в сочетании с оператором GROUP BY, 
чтобы ограничить группы возвращаемых строк только теми, чье условие TRUE.

///////////Агрегатные функции//////////////////////////
Задача. Сколько пассажиров приходится на одно бронирование?
Найдём количество пассажиров в каждом бронировании, 
затем — количество бронирований с каждым вариантом количества пассажиров.

Псевдонимы:
tickets t
подзапрос tt

SELECT tt.cnt, count(*)
FROM (
	SELECT t.book_ref, count(*) cnt FROM tickets t GROUP BY t.book_ref
     ) tt
GROUP BY tt.cnt
ORDER BY tt.cnt;

/////////////////Оконные функции///////////////
Задача. 
Какие сочетания имен и фамилий встречаются чаще всего и 
какую долю от числа всех пассажиров они составляют?
OVER после агрегатной функции, означает, что она выступает, выступает как оконная функция. 


SELECT passenger_name, round( 100.0 * cnt / sum(cnt) OVER (), 2) AS percent
FROM (
	SELECT passenger_name, count(*) cnt
	FROM tickets GROUP BY passenger_name
) t
ORDER BY percent DESC;

//////////////Оконные функции////////////////////
Задача. Для каждого билета выведите 
входящие в него перелеты вместе с запасом времени на пересадку на следующий рейс. 
Ограничьте выборку теми билетами, которые были забронированы семью днями ранее.
Чтобы не обращаться к одним и тем же данным два раза, воспользуйтесь оконными функциями.

Псевдонимы
bookings b
flights f
ticket_flights tf
tickets t
WINDOW w

выводим
номер билета, аэропорт вылета, аэропорт прибытия, время прибытия, 
	ожидаемое время вылета (полученное из окна w - набор времён вылета) как next_departure
	разница между временем вылета и прилёта, как gap
 
из таблиц 

SELECT  tf.ticket_no, f.departure_airport, f.arrival_airport, f.scheduled_arrival,

  lead(f.scheduled_departure) OVER w  AS next_departure,

  lead(f.scheduled_departure) OVER w - f.scheduled_arrival AS gap

FROM bookings b 
 JOIN tickets t ON t.book_ref = b.book_ref
 JOIN ticket_flights tf ON tf.ticket_no = t.ticket_no
 JOIN flights f ON tf.flight_id = f.flight_id

WHERE b.book_date = bookings.now()::date - INTERVAL '7 day'

WINDOW w AS (PARTITION BY tf.ticket_no ORDER BY f.scheduled_departure);

WINDOW w - задаёт псевдоним для окна полученного PARTITION BY 
PARTITION BY сужает окно со всего набора данных до отдельных групп в рамках этого набора данных.
Добавление OVER после lead означает, что lead выступает, не как агрегатная (группирующие все данне до одной строки),
а как оконная функция - помещающая значение в текущую строку. 

lead(значение anyelement [, смещение integer [, по_умолчанию anyelement ]])
возвращает значение для строки, положение которой задаётся смещением от текущей строки к концу раздела; 

если такой строки нет, возвращается значение по_умолчанию (оно должно иметь тот же тип, что и значение). 
Оба параметра смещение и значение по_умолчанию вычисляются для текущей строки. 
Если они не указываются, то смещение считается равным 1, а значение по_умолчанию — NUL


https://sql-ex.ru/blogs/?/Obzor_okonnyh_funkcij_PostgreSQL_.html

////////Рекурсивные запросы///////////

Задача. Как добраться из Усть-Кута (UKX) в Нерюнгри (CNN)
с минимальным числом пересадок и сколько времени придется провести в воздухе?

https://habr.com/ru/companies/postgrespro/articles/318398/













 



